<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="1a9a83f5-1ce1-4a31-9a12-b0913bd608d6" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="TestCase 1" searchProperties="true" timeout="0" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="1a9a83f5-1ce1-4a31-9a12-b0913bd608d6fileName">TestCase-1</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="properties" name="Properties" id="f2b0ca86-456c-4f8b-a8ab-4d1b4c2d693e">
    <con:settings/>
    <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:properties>
        <con:property>
          <con:name>demo</con:name>
          <con:value>{    "databaseId": 123,    "databaseName": "Test",    "address": "ON",    "details":    {         "detail_id": 999,         "userId": 2,         "date": null,         "state": "active"     },    "itemName": "Bob details", }</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Groovy Script" id="cb298727-0771-4036-b851-475e7f49ee20">
    <con:settings/>
    <con:config>
      <script>import groovy.json.*

def demo = context.expand( '${Properties#demo}' )

//Read the response of GetDetails and filter details
def details = new JsonSlurper().parseText(demo).details

//assert there is details available and not empty
assert details, "Details is empty or null in the response"

//Creating object to build the next step request
def json = new JsonBuilder()

//Building details object for Change
json.details {

  //looping thru each data
    details.each { key, value ->

      //Change state to inactive
      if ('state' == key) value = 'non-active'

      //add the properties inside details
      "$key"("$value")
    }
}

//Create a pretty print sting and this is going to be the next test step's request
def prettyJson = JsonOutput.prettyPrint(json.toString())

//Assign this data to a test step custom property, say REQUEST
context.testCase.setPropertyValue('REQUEST', prettyJson)</script>
    </con:config>
  </con:testStep>
  <con:testStep type="transfer" name="Property Transfer" id="6aa5aff6-0cb5-430f-a4f3-3b1d6ae380d9">
    <con:settings/>
    <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
        <con:name>update</con:name>
        <con:sourceStep>Groovy Script</con:sourceStep>
        <con:sourcePath/>
        <con:targetPath/>
        <con:upgraded>true</con:upgraded>
      </con:transfers>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>REQUEST</con:name>
      <con:value>{
    "details": {
        "detail_id": "999",
        "userId": "2",
        "date": "null",
        "state": "non-active"
    }
}</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
</con:testCase>
